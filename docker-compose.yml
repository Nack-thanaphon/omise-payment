services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: payment-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payment_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    container_name: payment-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Payment Service API
  payment-service:
    build: ./payment-service
    container_name: payment-service-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: payment_service
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OMISE_PUBLIC_KEY: ${OMISE_PUBLIC_KEY:-pkey_test_xxxxxxxxxxxxxxxxxxxxx}
      OMISE_SECRET_KEY: ${OMISE_SECRET_KEY:-skey_test_xxxxxxxxxxxxxxxxxxxxx}
      OMISE_WEBHOOK_SECRET: ${OMISE_WEBHOOK_SECRET:-whsec_test_xxxxxxxxxxxxxxxxxxxxx}
    volumes:
      - ./logs:/app/logs
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Worker (Queue Processor)
  payment-worker:
    build: ./payment-service
    container_name: payment-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_NAME: payment_service
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: ["npm", "run", "start:prod"]
    volumes:
      - ./logs:/app/logs

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: payment-nginx
    restart: unless-stopped
    depends_on:
      - payment-service
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test:
        ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
