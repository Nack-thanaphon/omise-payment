events {
    worker_connections 1024;
}

http {
    upstream payment_service {
        # Load balance between multiple instances of the payment-service
        least_conn; # Or round_robin, ip_hash
        server payment-service:3000;
        # Add more servers as needed, e.g., for multiple payment-service instances
        # server payment-service-2:3000;
    }

    upstream frontend_service {
        # Load balance between multiple instances of the frontend service
        least_conn;
        server frontend:3001;
        # Add more servers as needed
        # server frontend-2:3001;
    }

    upstream hello_backend_service {
        # Load balance between multiple instances of the new backend service
        least_conn;
        server backend-service:3000;
    }

    server {
        listen 80;
        server_name your_domain.com www.your_domain.com; # Replace with your actual domain

        # Optional: Redirect HTTP to HTTPS in production
        # return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name your_domain.com www.your_domain.com; # Replace with your actual domain

        # SSL Certificate configuration (replace with your actual paths)
        # ssl_certificate /etc/nginx/certs/your_domain.com/fullchain.pem;
        # ssl_certificate_key /etc/nginx/certs/your_domain.com/privkey.pem;
        # include /etc/nginx/options-ssl-nginx.conf;
        # ssl_dhparam /etc/nginx/ssl-dhparams.pem;

        # Frontend application
        location / {
            proxy_pass http://frontend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Add any other specific headers or configurations for frontend if needed
        }

        # API routes for payment service
        location /api/v1/payments/ {
            proxy_pass http://payment_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Request size limit (for large webhook payloads)
            client_max_body_size 10M;
        }

        # API routes for new backend service
        location /hello-api/ {
            proxy_pass http://hello_backend_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint (for payment service, if needed directly)
        location /health {
            proxy_pass http://payment_service/api/v1/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}
